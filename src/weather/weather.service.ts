import axios from "axios";
import { injectable } from "inversify";
import { IWeatherService } from "./weather.interface";
import 'reflect-metadata';

@injectable()
export class YandexWeather implements IWeatherService {
    private weather: any

    async getWeather(lat: number, long: number, token: string) {
        if (this.weather) {
            return this.weather;
        }

        this.weather = await this.getForecastFromService(lat, long, token);
        return this.weather;
    }

    async getForecastFromService(lat: number, long: number, token: string) {
        const { data } = await axios.get('https://api.weather.yandex.ru/v2/forecast', {
            params: {
                lat: lat,
                lon: long,
                lang: 'ru_RU'
            },
            headers: {
                'X-Yandex-API-Key': token
            }
        });

        return data;
    }

    getCondition = () => {
        if (!this.weather) {
            return '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ';
        }

        switch (this.weather?.fact?.condition) {
            case 'clear':
                return '–Ø—Å–Ω–æ';
            case 'partly-cloudy':
                return '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ';
            case 'cloudy':
                return '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏';
            case 'overcast':
                return '–ü–∞—Å–º—É—Ä–Ω–æ';
            case 'drizzle':
                return '–ú–æ—Ä–æ—Å—å';
            case 'light-rain':
                return '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å';
            case 'rain':
            case 'moderate-rain':
                return '–î–æ–∂–¥—å';
            case 'heavy-rain':
            case 'continuous-heavy-rain':
                return '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å–¥—å';
            case 'showers':
                return '–õ–∏–≤–µ–Ω—å';
            case 'wet-snow':
                return '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º';
            case 'light-snow':
                return '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥';
            case 'snow':
                return '–°–Ω–µ–≥';
            case 'snow-showers':
                return '–°–Ω–µ–≥–æ–ø–∞–¥';
            case 'hail':
                return '–ì—Ä–∞–¥';
            case 'thunderstorm':
                return '–ì—Ä–æ–∑–∞';
            case 'thunderstorm-with-rain':
                return '–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π';
            case 'thunderstorm-with-hail':
                return '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º';
            default:
                return '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    getIcon() {
        if (!this.weather) {
            return '';
        }
        switch (this.weather?.fact?.icon) {
            case 'skc_d':
                return '‚òÄÔ∏è';
            case 'skc_n':
                return 'üåô';
            case 'ovc_ts_ra':
                return '‚õà';
            case 'bkn_d':
            case 'bkn_n':
                return '‚õÖÔ∏è';
            case 'bkn_-ra_d':
            case 'bkn_-ra_n':
                return 'üå•';
            case 'bkn_-sn_d':
            case 'bkn_-sn_n':
                return '‚ùÑÔ∏è';
            case 'bkn_ra_d':
            case 'bkn_ra_n':
                return 'üå¶';
            case 'bkn_sn_d':
            case 'bkn_sn_n':
                return 'üå®';
            case 'ovc':
            case 'ovc_-ra':
            case 'ovc_-sn':
                return '‚òÅÔ∏è';
            case 'ovc_ra':
            case 'ovc_sn':
                return 'üåß';
            case 'fg_d':
                return 'üå´';
            default:
                return '‚õÖÔ∏è';
        }
    }
}
